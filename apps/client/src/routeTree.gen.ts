/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WorkspacesImport } from './routes/workspaces'
import { Route as LoginImport } from './routes/login'
import { Route as FavoritesImport } from './routes/favorites'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as WorkspacesNewImport } from './routes/workspaces.new'
import { Route as WorkspacesIdImport } from './routes/workspaces.$id'

// Create/Update Routes

const WorkspacesRoute = WorkspacesImport.update({
  id: '/workspaces',
  path: '/workspaces',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const FavoritesRoute = FavoritesImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkspacesNewRoute = WorkspacesNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => WorkspacesRoute,
} as any)

const WorkspacesIdRoute = WorkspacesIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => WorkspacesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/favorites': {
      id: '/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof FavoritesImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/workspaces': {
      id: '/workspaces'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof WorkspacesImport
      parentRoute: typeof rootRoute
    }
    '/workspaces/$id': {
      id: '/workspaces/$id'
      path: '/$id'
      fullPath: '/workspaces/$id'
      preLoaderRoute: typeof WorkspacesIdImport
      parentRoute: typeof WorkspacesImport
    }
    '/workspaces/new': {
      id: '/workspaces/new'
      path: '/new'
      fullPath: '/workspaces/new'
      preLoaderRoute: typeof WorkspacesNewImport
      parentRoute: typeof WorkspacesImport
    }
  }
}

// Create and export the route tree

interface WorkspacesRouteChildren {
  WorkspacesIdRoute: typeof WorkspacesIdRoute
  WorkspacesNewRoute: typeof WorkspacesNewRoute
}

const WorkspacesRouteChildren: WorkspacesRouteChildren = {
  WorkspacesIdRoute: WorkspacesIdRoute,
  WorkspacesNewRoute: WorkspacesNewRoute,
}

const WorkspacesRouteWithChildren = WorkspacesRoute._addFileChildren(
  WorkspacesRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/favorites': typeof FavoritesRoute
  '/login': typeof LoginRoute
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/workspaces/$id': typeof WorkspacesIdRoute
  '/workspaces/new': typeof WorkspacesNewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/favorites': typeof FavoritesRoute
  '/login': typeof LoginRoute
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/workspaces/$id': typeof WorkspacesIdRoute
  '/workspaces/new': typeof WorkspacesNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/favorites': typeof FavoritesRoute
  '/login': typeof LoginRoute
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/workspaces/$id': typeof WorkspacesIdRoute
  '/workspaces/new': typeof WorkspacesNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/favorites'
    | '/login'
    | '/workspaces'
    | '/workspaces/$id'
    | '/workspaces/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/favorites'
    | '/login'
    | '/workspaces'
    | '/workspaces/$id'
    | '/workspaces/new'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/favorites'
    | '/login'
    | '/workspaces'
    | '/workspaces/$id'
    | '/workspaces/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  FavoritesRoute: typeof FavoritesRoute
  LoginRoute: typeof LoginRoute
  WorkspacesRoute: typeof WorkspacesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  FavoritesRoute: FavoritesRoute,
  LoginRoute: LoginRoute,
  WorkspacesRoute: WorkspacesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/favorites",
        "/login",
        "/workspaces"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/favorites": {
      "filePath": "favorites.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/workspaces": {
      "filePath": "workspaces.tsx",
      "children": [
        "/workspaces/$id",
        "/workspaces/new"
      ]
    },
    "/workspaces/$id": {
      "filePath": "workspaces.$id.tsx",
      "parent": "/workspaces"
    },
    "/workspaces/new": {
      "filePath": "workspaces.new.tsx",
      "parent": "/workspaces"
    }
  }
}
ROUTE_MANIFEST_END */
